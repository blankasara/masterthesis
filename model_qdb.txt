model{

  #priors of interest
  ##Skill distr.
  S ~ dunif(1/3,1) #mean for skill distr. (.3 chance with 3 options)
  
  ##Sensitivity d'
  rs <- (S-1/3)/(2/3) #phi(S)
  #rescale S to be between 0,1
  auc <- pnorm(rs,0,1) #AUC=cum(rs), acc. between 0.5 and 1
  d <- qnorm(auc,0,1)*sqrt(2) #from AUC=cum(d'/sqrt(2))

  #####Creating the thresholds for the ratings
  #Unbiased on the [0,1] line and the real line [-,]
  for (c in 1:(nCat-1)){
    gam[c] <- c/nCat                        #[0,1] interval for uninf equal thresholds
    gamReal[c] <- -log((1-gam[c])/gam[c])   #[-inf,inf] interval for uncertainty
  }
  
#Parameters to create biased thresholds: a (slope or scale), b (intercept or shift)
  a ~ dgamma(2,2)
  b ~ dnorm(0,1)
  #linear regression to estimate thresholds
  for (c in 1:(nCat-1)){
    dReal[c] <- a * gamReal[c] + b
  }
  
#####Data draws by trials
  for (t in 1:ntrials){

    ## outcome of the trial based on S and Qd
    Qd[t] ~ dunif(1/3,1) #difficulty of question on trial t = prob of answering correct
    prob_c[t] <- S*Qd[t] #prob of answering right = product of skill and Qd
    O[t] ~ dbern(prob_c[t]) #outcome of trial t (0/1) is a bernoulli trial
    
    ## rating based on adjusted scale on Qd
    #transform Qd to a different scale
    sQd[t] <- -log((1-Qd[t])/Qd[t])
    #decreasing bias along with increasing Q difficulty
    for (c in 1:(nCat-1)){
      dRealt[t,c] <- dReal[c] + sQd[t]
    }

    #for rating 1 on trial t given incorr./corr.
    pIn[t,1] <- pnorm(dRealt[t,1],0,1)
    pC[t,1] <- pnorm(dRealt[t,1],d,1)
    #prob for rest of the ratings given incorr. and corr.
    for (c in 2:(nCat-1)){
      pIn[t,c] <- pnorm(dRealt[t,c],0,1) - sum(pIn[t,1:(c-1)])
      pC[t,c] <- pnorm(dRealt[t,c],d,1) - sum(pC[t,1:(c-1)])
    }
    #prob for last rating
    pIn[t,nCat] <- 1 - sum(pIn[t,1:(nCat-1)])
    pC[t,nCat] <- 1 - sum(pC[t,1:(nCat-1)])
    
    ## rating
    for (c in 1:(nCat)){
      pR[t,c] <- ifelse(O[t]==1, pC[t,c], pIn[t,c])
    }
    
    R[t] ~ dcat(pR[t,])
    
  }
}